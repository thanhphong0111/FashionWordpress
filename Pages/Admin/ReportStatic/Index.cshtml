@page
@model Group1_CourseOnline.Pages.Admin.ReportStatic.IndexModel
@{
    Layout = "~/Pages/Shared/_Layout1.cshtml";
}
<!-- Hiển thị thông báo AlerBox -->
<div id="AlertContainer" style="position: fixed; top: 50px; right: 40px; z-index: 9999;">
    @if (TempData["AlertMessage"] != null)
    {
        <div id="AlertBox" class="alert alert-dismissible @TempData["AlertType"]" role="alert">
            <strong>@TempData["Notification"]!</strong>
            @TempData["AlertMessage"]
        </div>
    }
</div>
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>Customer Management</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="/Admin/ReportStatic/Index">Home</a></li>
                        <li class="breadcrumb-item active">Report and Static</li>
                    </ol>
                </div>
            </div>
        </div><!-- /.container-fluid -->
    </section>
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <!-- Left col -->
                <section class="col-lg-6 connectedSortable">


                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="fas fa-chart-pie mr-1"></i>
                                Sales
                            </h3>
                            <div class="card-tools">
                                <ul class="nav nav-pills ml-auto">
                                    <li class="nav-item">
                                        <a class="nav-link active" href="#revenue-chart" data-toggle="tab">Orders</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" href="#sales-chart" data-toggle="tab">Income</a>
                                    </li>
                                </ul>
                            </div>
                        </div><!-- /.card-header -->
                        <!-- /.card-body -->

                        <div class="card-body">
                            <div class="tab-content p-0">
                                <!-- Morris chart - Sales -->
                                <div class="chart tab-pane active" id="revenue-chart" style="position: relative; height: 400px;">
                                    <div class="d-flex">
                                        <p class="mr-auto d-flex flex-column">
                                            <span class="text-bold text-lg">@Model.TotalSales</span>
                                            <span>Orders Over Time</span>
                                        </p>
                                        <p class="ml-auto d-flex flex-column text-right">
                                            @if (Model.percentage < 0)
                                            {
                                                <span class="text-danger">

                                                    <i class="fas fa-arrow-down"></i> @Model.percentage.ToString("F2") %


                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-success">

                                                    <i class="fas fa-arrow-up"></i> @Model.percentage.ToString("F2") %


                                                </span>
                                            }

                                            <span class="text-muted">Since Last Year</span>
                                        </p>
                                    </div>
                                    <div class="position-relative mb-4">
                                        <canvas id="comparisonChart" height="160"></canvas>
                                    </div>

                                </div>
                                <div class="chart tab-pane" id="sales-chart" style="position: relative; height: 400px;">
                                    <div class="d-flex">
                                        <p class="mr-auto d-flex flex-column">
                                            <span class="text-bold text-lg">$ @Model.TotalProfit</span><span>Income Over Time</span>

                                        </p>
                                        <p class="ml-auto d-flex flex-column text-right">
                                            @if (Model.percentage < 0)
                                            {
                                                <span class="text-danger">

                                                    <i class="fas fa-arrow-down"></i> @Model.incomePercentage.ToString("F2") %


                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-success">

                                                    <i class="fas fa-arrow-up"></i> @Model.incomePercentage.ToString("F2") %


                                                </span>
                                            }

                                            <span class="text-muted">Since Last Year</span>
                                        </p>
                                    </div>
                                    <div class="position-relative mb-4">
                                        <canvas id="myChart" height="160"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
                <section class="col-lg-6 connectedSortable">
                    <div class="card">
                        <div class="card-header border-0">
                            <h3 class="card-title">
                                <i class="fas fa-th mr-1"></i>
                                Sales Graph
                            </h3>

                            <div class="card-tools">
                                <button type="button" class="btn bg-info btn-sm" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <button type="button" class="btn bg-info btn-sm" data-card-widget="remove">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <canvas class="chart" id="salesChart" style="min-height: 400px; height: 400px; max-height: 400px; max-width: 100%;"></canvas>
                        </div>
                        <!-- /.card-body -->
                        <!-- /.card-footer -->
                    </div>
                </section>

                <section class="col-lg-12 connectedSortable">

                    <div class="card">
                        <div class="card-header border-0 row">
                            <div class="col-4">
                                <h3 class="card-title">
                                    <i class="fa fa-chart-bar"></i>
                                    Customer Chart
                                </h3>
                            </div>
                            <div class="col-4 text-center">
                                <select id="chartSelect">
                                    <option value="month">Month</option>
                                    <option value="day">Day</option>
                                    <option value="year">Year</option>
                                </select>
                            </div>

                            <div class="card-tools col-4 text-right">
                                <button type="button" class="btn bg-info btn-sm" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <button type="button" class="btn bg-info btn-sm" data-card-widget="remove">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">

                            <div class="chart tab-pane active" style="position: relative; height: 400px;">
                                <div class="position-relative mb-4">
                                    <canvas id="comparisonChart1" height="90"></canvas>
                                </div>
                            </div>
                        </div>
                        <!-- /.card-body -->
                        <!-- /.card-footer -->
                    </div>
                </section>

                <section class="col-lg-6 connectedSortable">

                    <div class="card">
                        <div class="card-header border-0 d-flex row">
                            <div class="col-4">
                                <h3 class="card-title">
                                    <i class="fa fa-chart-bar"></i>
                                    Categorys Chart
                                </h3>
                            </div>
                            <div class="col-4 text-center">
                                <select id="ViewSelected">
                                    <option value="income">
                                        Income
                                    </option>
                                    <option value="view">
                                        View
                                    </option>
                                </select>
                            </div>

                            <div class="card-tools col-4 text-right">
                                <button type="button" class="btn bg-info btn-sm" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <button type="button" class="btn bg-info btn-sm" data-card-widget="remove">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">

                            <div class="chart tab-pane active" style="position: relative; height: 400px;">
                                <div class="position-relative mb-4">
                                    <canvas id="donutChart" height="350"></canvas>
                                </div>
                            </div>
                        </div>
                        <!-- /.card-body -->
                        <!-- /.card-footer -->
                    </div>
                </section>

            </div>
        </div>
    </section>
    <!-- right col -->
</div>
<script>

    var profit6month = @Json.Serialize(Model.profitOrders6Months);
    var order6Month = @Json.Serialize(Model.Orders6Months);
    var month1s = Object.keys(order6Month).map(function (key) {
        return key;
    });
    var profit6monthValue = Object.values(profit6month);
    var order6monthValue = Object.values(order6Month);
    var salesData = {
        labels: month1s,
        datasets: [
            {
                type: 'line',
                label: 'Sales',
                data: profit6monthValue,
                backgroundColor: 'rgba(40, 167, 69, 0.2)',
                borderColor: 'rgba(40, 167, 69, 1)',
                borderWidth: 1,
                yAxisID: 'left-y-axis',
                lineTension: 0.5

            },
            {
                type: 'bar',
                label: 'Orders',
                data: order6monthValue,
                backgroundColor: 'rgba(30, 144, 255, 0.2)',
                borderColor: 'rgba(30, 144, 255, 1)',
                borderWidth: 1,
                yAxisID: 'right-y-axis'
            }
        ]
    };

    var salesChart = new Chart(document.getElementById('salesChart'), {
        type: 'bar',
        data: salesData,
        options: {
            responsive: true,
            scales: {
                y: [
                    {
                        id: 'left-y-axis',
                        position: 'left',
                        beginAtZero: true,
                        ticks: {
                            color: 'rgba(40, 167, 69, 1)'
                        }
                    },
                    {
                        id: 'right-y-axis',
                        position: 'right',
                        beginAtZero: true,
                        ticks: {
                            color: 'rgba(30, 144, 255, 1)'
                        }
                    }
                ],
                x: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Month',
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        font: {
                            weight: 'bold'
                        }
                    }
                }
            }
        }
    });

    // Configuration options for the chart


    // Tạo biểu đồ
    var orderData = @Json.Serialize(Model.Oldorders12months);
    var order12 = @Json.Serialize(Model.orders12months);
    var months = Object.keys(orderData).map(function (key) {
        return key;
    });
    var orderCount = Object.values(orderData);

    var order2023Count = Object.values(order12);
    var labels = months;
    var ctx = document.getElementById('comparisonChart').getContext('2d');
    var comparisonChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Last Year',
                    data: orderCount,
                    borderColor: "rgb(0, 123, 255)", // Màu primary của Bootstrap
                    backgroundColor: "rgb(0, 123, 255)",
                    borderWidth: 1
                },
                {
                    label: 'This Year',
                    data: order2023Count,
                    borderColor: "rgb(40, 167, 69)", // Màu success của Bootstrap
                    backgroundColor: "rgb(40, 167, 69)",
                    borderWidth: 1
                }
            ]
        },
        options: {
            scales: {
                x: {
                    display: true,
                    title: {
                        display: true,
                        text: "Month"
                    }
                },
                y: {
                    display: true,
                    title: {
                        display: true,
                        text: "Orders"
                    }
                }
            }
        }
    });
    var customerData = @Json.Serialize(Model.Customer6Month);


    document.addEventListener('DOMContentLoaded', function () {
        var months = Object.keys(customerData).map(function (key) {
            return key;
        });
        var customerCount = Object.values(customerData);

        var ctx = document.getElementById('comparisonChart1').getContext('2d');
        var comparisonChart1 = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: months,
                datasets: [
                    {
                        label: 'Customer',
                        data: customerCount,
                        borderColor: "rgb(0, 123, 255)", // Màu primary của Bootstrap
                        backgroundColor: "rgb(0, 123, 255)",
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: "Month"
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: "Customer"
                        }
                    }
                }
            }
        });


        document.getElementById("chartSelect").addEventListener("change", function () {
            var selectedValue = this.value;

            switch (selectedValue) {
                case "month":
                    customerData = @Json.Serialize(Model.Customer6Month);
                    comparisonChart1.data.labels = Object.keys(customerData).map(function (key) {
                        return key;
                    });
                    comparisonChart1.data.datasets[0].data = Object.values(customerData);
                    comparisonChart1.update();
                    break;
                case "day":
                    customerData = @Json.Serialize(Model.Customer7Day);
                    comparisonChart1.data.labels = Object.keys(customerData).map(function (key) {
                        return key;
                    });
                    comparisonChart1.data.datasets[0].data = Object.values(customerData);
                    comparisonChart1.update();
                    break;
                case "year":
                    customerData = @Json.Serialize(Model.CustomerYear);
                    comparisonChart1.data.labels = Object.keys(customerData).map(function (key) {
                        return key;
                    });
                    comparisonChart1.data.datasets[0].data = Object.values(customerData);
                    comparisonChart1.update();
                    break;
                default:
                    break;
            }
        });
    });


    // Lấy thẻ canvas từ HTML
    var chartCanvas = document.getElementById("myChart");

    var profit2022 = @Json.Serialize(Model.profitOrders2022);
    var profit2023 = @Json.Serialize(Model.profitOrders2023);
    var months = Object.keys(profit2022).map(function (key) {
        return key;
    });
    var profit2022Value = Object.values(profit2022);
    var profit2023Value = Object.values(profit2023);


    // Tạo dữ liệu cho biểu đồ
    var chartData = {
        labels: months, // Các tháng từ 1 đến 12
        datasets: [
            {
                label: "Last Year",
                data: profit2022Value, // Dữ liệu số đơn hàng năm 2022
                borderColor: "rgb(0, 123, 255)",
                fill: false,
                lineTension: 0.5
            },
            {
                label: "This Year",
                data: profit2023Value, // Dữ liệu số đơn hàng năm 2023
                borderColor: "rgb(40, 167, 69)",
                fill: false,
                lineTension: 0.5
            }
        ]
    };

    // Tạo biểu đồ
    var myChart = new Chart(chartCanvas, {
        type: "line",
        data: chartData,
        options: {
            responsive: true,
            scales: {
                x: {
                    display: true,
                    title: {
                        display: true,
                        text: "Month"
                    }
                },
                y: {
                    display: true,
                    title: {
                        display: true,
                        text: "Income"
                    }
                }
            }
        }
    });
    document.addEventListener('DOMContentLoaded', function () {
        //donut chart
        // Lấy thẻ canvas và tạo biểu đồ
        var view = @Json.Serialize(Model.IncomeCategory);

        var lab = Object.keys(view).map(function (key) {
            return key;
        });
        var dataView = Object.values(view);

        var canvas = document.getElementById('donutChart');
        var ctx = canvas.getContext('2d');
        var donutChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: lab,
                datasets: [{
                    data: dataView,
                    backgroundColor: [
                        '#007bff',
                        '#28a745',
                        '#17a2b8',
                        '#ffc107',
                        '#dc3545',
                        '#6610f2',
                        '#6f42c1',
                        '#fd7e14',
                        '#20c997',
                        '#adb5bd'
                    ]
                }]
            },
            options: {
                maintainAspectRatio: false,
                responsive: true,
                legend: {
                    position: 'bottom',
                    
                },
                title: {
                    display: true,
                    text: 'Views by Product',
                    fontSize: 20,
                }
            }
        });

        document.getElementById("ViewSelected").addEventListener("change", function () {
            var selectedValue = this.value;

            switch (selectedValue) {
                case "income":
                    view = @Json.Serialize(Model.IncomeCategory);
                    donutChart.data.labels = Object.keys(view).map(function (key) {
                        return key;
                    });
                    donutChart.data.datasets[0].data = Object.values(view);
                    donutChart.options.title.text = "Income by Category";
                    donutChart.options.legend.display = true;
                    donutChart.update();
                    break;

                case "view":
                    view = @Json.Serialize(Model.ViewByCategory);
                    donutChart.data.labels = Object.keys(view).map(function (key) {
                        return key;
                    });
                    donutChart.data.datasets[0].data = Object.values(view);
                    donutChart.options.title.text = "Views by Category";
                    donutChart.options.legend.display = true;
                    donutChart.update();
                    break;


                default:
                    break;
            }
        });
    });

</script>

<!-- AdminLTE JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.1.0/js/adminlte.min.js"></script>

